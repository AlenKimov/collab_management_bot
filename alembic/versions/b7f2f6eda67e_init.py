"""init

Revision ID: b7f2f6eda67e
Revises: 
Create Date: 2023-03-25 18:02:53.419280

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b7f2f6eda67e'
down_revision = None
branch_labels = None
depends_on = None

create_triggers_sql = """
CREATE OR REPLACE FUNCTION increment_project_vote_count()
    RETURNS trigger
    LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
    IF NEW.vote_type = 1 THEN
       UPDATE project
       SET likes = likes + 1
       WHERE twitter_handle = NEW.project_twitter_handle;
    END IF;	
    IF NEW.vote_type = 0 THEN
        UPDATE project
        SET dislikes = dislikes + 1
        WHERE twitter_handle = NEW.project_twitter_handle;
    END IF;
    RETURN NEW;
END;
$BODY$;


CREATE OR REPLACE FUNCTION decrement_project_vote_count()
    RETURNS trigger
    LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
    IF OLD.vote_type = 1 THEN
       UPDATE project
       SET likes = likes - 1
       WHERE twitter_handle = OLD.project_twitter_handle;
    END IF;
    IF OLD.vote_type = 0 THEN
        UPDATE project
        SET dislikes = dislikes - 1
        WHERE twitter_handle = OLD.project_twitter_handle;
    END IF;
    RETURN NEW;
END;
$BODY$;

CREATE OR REPLACE TRIGGER after_insert_on_vote
AFTER INSERT ON vote
FOR EACH ROW
EXECUTE PROCEDURE increment_project_vote_count();

CREATE OR REPLACE TRIGGER after_delete_on_vote
AFTER DELETE ON vote
FOR EACH ROW
EXECUTE PROCEDURE decrement_project_vote_count();
"""

drop_triggers_sql = """
DROP TRIGGER IF EXISTS after_insert_on_vote ON vote;
DROP TRIGGER IF EXISTS after_delete_on_vote ON vote;
DROP FUNCTION IF EXISTS increment_project_vote_count;
DROP FUNCTION IF EXISTS decrement_project_vote_count;
"""


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('manager',
    sa.Column('telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('telegram_handle', sa.String(length=32), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('telegram_id')
    )
    op.create_table('project',
    sa.Column('twitter_handle', sa.String(length=15), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('tss_requested_at', sa.DateTime(), nullable=True),
    sa.Column('tss', sa.Integer(), nullable=True),
    sa.Column('likes', sa.SmallInteger(), nullable=False),
    sa.Column('dislikes', sa.SmallInteger(), nullable=False),
    sa.Column('manager_telegram_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['manager_telegram_id'], ['manager.telegram_id'], ),
    sa.PrimaryKeyConstraint('twitter_handle')
    )
    op.create_index(op.f('ix_project_created_at'), 'project', ['created_at'], unique=False)
    op.create_index(op.f('ix_project_twitter_handle'), 'project', ['twitter_handle'], unique=False)
    op.create_table('vote',
    sa.Column('manager_telegram_id', sa.BigInteger(), nullable=False),
    sa.Column('project_twitter_handle', sa.String(length=15), nullable=False),
    sa.Column('vote_type', sa.Integer(), nullable=False),
    sa.CheckConstraint('vote_type IN (0, 1)'),
    sa.ForeignKeyConstraint(['manager_telegram_id'], ['manager.telegram_id'], ),
    sa.ForeignKeyConstraint(['project_twitter_handle'], ['project.twitter_handle'], ),
    sa.PrimaryKeyConstraint('manager_telegram_id', 'project_twitter_handle')
    )
    op.execute(create_triggers_sql)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('vote')
    op.drop_index(op.f('ix_project_twitter_handle'), table_name='project')
    op.drop_index(op.f('ix_project_created_at'), table_name='project')
    op.drop_table('project')
    op.drop_table('manager')
    op.execute(drop_triggers_sql)
    # ### end Alembic commands ###
